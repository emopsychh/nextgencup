from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from bot_service.keyboards.main import submenu_keyboard
from bot_service.keyboards.tournaments import tournaments_menu_keyboard
from bot_service.services.mock_api import create_tournament
from bot_service.db_container.db import AsyncSessionLocal
from bot_service.db_container.models import Tournament
from datetime import datetime

router = Router()

class TournamentStates(StatesGroup):
    title = State()
    description = State()
    date = State()

@router.message(F.text == "üèÜ –¢—É—Ä–Ω–∏—Ä—ã")
async def show_tournaments_section(message: Message):
    await message.answer("üìã –ú–µ–Ω—é —Ç—É—Ä–Ω–∏—Ä–æ–≤:", reply_markup=tournaments_menu_keyboard())

@router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä")
async def start_tournament_creation(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:")
    await state.set_state(TournamentStates.title)

@router.message(TournamentStates.title)
async def set_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:")
    await state.set_state(TournamentStates.description)

@router.message(TournamentStates.description)
async def set_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ (–ø—Ä–∏–º–µ—Ä: 25.04.2025 18:00):")
    await state.set_state(TournamentStates.date)

@router.message(TournamentStates.date)
async def set_date_and_create(message: Message, state: FSMContext):
    await state.update_data(start_time=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ FSM

    try:
        await handle_create_tournament(message, state)  # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º —Ç–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:\n{str(e)}")

    await state.clear()  # –û—á–∏—â–∞–µ–º FSM

@router.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: Message):
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=submenu_keyboard())

# –ò –Ω–∏–∂–µ —Å—é–¥–∞ –ø—Ä–∏–∫–ª–µ–∏–≤–∞–µ—à—å handle_create_tournament, –∫–æ—Ç–æ—Ä—ã–π —è —Ç–µ–±–µ —Å–∫–∏–Ω—É–ª:
async def handle_create_tournament(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞."""

    data = await state.get_data()
    title = data.get("title")
    description = data.get("description")
    start_time_str = data.get("start_time")

    try:
        start_time = datetime.strptime(start_time_str, "%d.%m.%Y %H:%M")
        chall_url = await create_tournament(title, description, start_time.isoformat())

        async with AsyncSessionLocal() as session:
            new_tournament = Tournament(
                title=title,
                description=description,
                date=start_time,
                chall_url=chall_url,
                is_active=True,
            )
            session.add(new_tournament)
            await session.commit()

        await message.answer(
            f"‚úÖ –¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"üïí –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"üîó <a href='{chall_url}'>–û—Ç–∫—Ä—ã—Ç—å —Ç—É—Ä–Ω–∏—Ä</a>",
            parse_mode="HTML",
            disable_web_page_preview=True,
        )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:\n{str(e)}")
