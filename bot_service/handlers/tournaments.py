from aiogram import Router, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from sqlalchemy import select
from datetime import datetime

from database.db import AsyncSessionLocal
from database.models import Tournament
from keyboards.tournaments import tournaments_menu_keyboard, admin_tournaments_keyboard

router = Router()

# üë§ –£–∫–∞–∂–∏ —Å–≤–æ–π Telegram ID
ADMIN_ID = 5829755634


# üìÇ –ì–ª–∞–≤–Ω–æ–µ –ø–æ–¥–º–µ–Ω—é —Ç—É—Ä–Ω–∏—Ä–æ–≤
@router.message(F.text == "üèÜ –¢—É—Ä–Ω–∏—Ä—ã")
async def open_tournaments_menu(message: types.Message):
    is_admin = message.from_user.id == ADMIN_ID
    await message.answer(
        "üìÇ–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=tournaments_menu_keyboard(is_admin)
    )


# üìã –°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤ (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
@router.message(F.text == "üóÇ –°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤")
async def show_tournament_list(message: types.Message):
    async with AsyncSessionLocal() as session:
        stmt = select(Tournament).where(Tournament.is_active == True)
        result = await session.execute(stmt)
        tournaments = result.scalars().all()

        if not tournaments:
            await message.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.")
            return

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=t.title, callback_data=f"tournament_{t.id}")]
                for t in tournaments
            ]
        )

        await message.answer(
            "üìã <b>–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤:</b>",
            parse_mode="HTML",
            reply_markup=keyboard
        )


# üéØ –î–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
@router.callback_query(F.data.startswith("tournament_"))
async def show_tournament_details(callback: CallbackQuery):
    tournament_id = int(callback.data.split("_")[1])

    async with AsyncSessionLocal() as session:
        stmt = select(Tournament).where(Tournament.id == tournament_id)
        result = await session.execute(stmt)
        t = result.scalar_one_or_none()

        if not t:
            await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        text = (
            f"üèÜ <b>{t.title}</b>\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {t.date.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {t.description}\n\n"
            f"üîó <a href='{t.chall_url}'>–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ</a>"
        )

        await callback.message.answer(text, parse_mode="HTML", disable_web_page_preview=True)
        await callback.answer()


# ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
@router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä")
async def create_tournament(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤.")
        return

    async with AsyncSessionLocal() as session:
        tournament = Tournament(
            title="CS2 DUO CUP",
            description="–ö–æ–º–∞–Ω–¥–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –Ω–∞ –≤—ã–ª–µ—Ç. –ü—Ä–∏–∑ ‚Äî —Å–ª–∞–≤–∞ –∏ XP!",
            date=datetime(2025, 4, 20, 18, 0),
            chall_url="https://challengermode.com/tournaments/cs2-duocup-20apr"
        )
        session.add(tournament)
        await session.commit()

        await message.answer(f"‚úÖ –¢—É—Ä–Ω–∏—Ä ¬´{tournament.title}¬ª —Å–æ–∑–¥–∞–Ω!")
