from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from keyboards.main import submenu_keyboard
from keyboards.tournaments import tournaments_menu_keyboard, active_tournaments_inline_keyboard

from db_container.db import get_session
from db_container.models import Tournament
from sqlalchemy import select

router = Router()

class TournamentStates(StatesGroup):
    title = State()
    description = State()
    date = State()

# –ú–µ–Ω—é "üèÜ –¢—É—Ä–Ω–∏—Ä—ã"
@router.message(F.text == "üèÜ –¢—É—Ä–Ω–∏—Ä—ã")
async def show_tournaments_section(message: Message):
    await message.answer("üìã –ú–µ–Ω—é —Ç—É—Ä–Ω–∏—Ä–æ–≤:", reply_markup=tournaments_menu_keyboard())

# üìÑ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã (inline-–∫–Ω–æ–ø–∫–∏)
@router.message(F.text == "üìÑ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã")
async def list_active_tournaments(message: Message):
    async for session in get_session():
        try:
            stmt = select(Tournament).where(Tournament.is_active == True)
            result = await session.execute(stmt)
            tournaments = result.scalars().all()

            if not tournaments:
                await message.answer("‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
                return

            await message.answer(
                "üìÑ –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤:",
                reply_markup=active_tournaments_inline_keyboard(tournaments)
            )

        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤: {e}")

# ‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä (FSM)
@router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä")
async def start_tournament_creation(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:")
    await state.set_state(TournamentStates.title)

@router.message(TournamentStates.title)
async def set_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:")
    await state.set_state(TournamentStates.description)

@router.message(TournamentStates.description)
async def set_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ (–ø—Ä–∏–º–µ—Ä: 25.04.2025 18:00):")
    await state.set_state(TournamentStates.date)

@router.message(TournamentStates.date)
async def finish_tournament_creation(message: Message, state: FSMContext):
    from datetime import datetime
    user_data = await state.get_data()
    try:
        date = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    async for session in get_session():
        tournament = Tournament(
            title=user_data["title"],
            description=user_data["description"],
            date=date,
            is_active=True
        )
        session.add(tournament)
        await session.commit()

    await message.answer(f"‚úÖ –¢—É—Ä–Ω–∏—Ä \"{user_data['title']}\" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=tournaments_menu_keyboard())
    await state.clear()

# ‚óÄÔ∏è –ù–∞–∑–∞–¥
@router.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: Message):
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=submenu_keyboard())
