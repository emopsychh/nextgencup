from aiogram import Router, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from sqlalchemy import select
from datetime import datetime
from database.db import AsyncSessionLocal
from database.models import Tournament
from keyboards.tournaments import tournaments_menu_keyboard, admin_tournaments_keyboard
from aiogram.fsm.context import FSMContext
from states.tournament_states import TournamentCreation
from datetime import datetime
from keyboards.main import main_menu_keyboard
from services.challengermode_api import create_tournament
from keyboards.tournaments import confirm_button

router = Router()

# üë§ –£–∫–∞–∂–∏ —Å–≤–æ–π Telegram ID
ADMIN_ID = 5829755634


# üìÇ –ì–ª–∞–≤–Ω–æ–µ –ø–æ–¥–º–µ–Ω—é —Ç—É—Ä–Ω–∏—Ä–æ–≤
@router.message(F.text == "üèÜ –¢—É—Ä–Ω–∏—Ä—ã")
async def open_tournaments_menu(message: types.Message):
    is_admin = message.from_user.id == ADMIN_ID
    await message.answer(
        "üìÇ–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=tournaments_menu_keyboard(is_admin)
    )


# üìã –°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤ (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
@router.message(F.text == "üóÇ –°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤")
async def show_tournament_list(message: types.Message):
    async with AsyncSessionLocal() as session:
        stmt = select(Tournament).where(Tournament.is_active == True)
        result = await session.execute(stmt)
        tournaments = result.scalars().all()

        if not tournaments:
            await message.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.")
            return

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[ 
                [InlineKeyboardButton(text=t.title, callback_data=f"tournament_{t.id}")]
                for t in tournaments
            ]
        )

        await message.answer(
            "üìã <b>–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤:</b>",
            parse_mode="HTML",
            reply_markup=keyboard
        )


# üéØ –î–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
@router.callback_query(F.data.startswith("tournament_"))
async def show_tournament_details(callback: CallbackQuery):
    tournament_id = int(callback.data.split("_")[1])

    async with AsyncSessionLocal() as session:
        stmt = select(Tournament).where(Tournament.id == tournament_id)
        result = await session.execute(stmt)
        t = result.scalar_one_or_none()

        if not t:
            await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        text = (
            f"üèÜ <b>{t.title}</b>\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {t.date.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {t.description}\n\n"
            f"üîó <a href='{t.chall_url}'>–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ</a>"
        )

        await callback.message.answer(text, parse_mode="HTML", disable_web_page_preview=True)
        await callback.answer()


# START FSM
@router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä")
async def start_tournament_creation(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤.")
        return

    await message.answer("üìù –í–≤–µ–¥–∏ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> —Ç—É—Ä–Ω–∏—Ä–∞:", parse_mode="HTML")
    await state.set_state(TournamentCreation.title)

#NAME
@router.message(TournamentCreation.title)
async def set_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b> —Ç—É—Ä–Ω–∏—Ä–∞:", parse_mode="HTML")
    await state.set_state(TournamentCreation.description)

#DESCRIPTION
@router.message(TournamentCreation.description)
async def set_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("üìÖ –í–≤–µ–¥–∏ <b>–¥–∞—Ç—É –∏ –≤—Ä–µ–º—è</b> —Ç—É—Ä–Ω–∏—Ä–∞ (–ø—Ä–∏–º–µ—Ä: 20.04.2025 18:00):", parse_mode="HTML")
    await state.set_state(TournamentCreation.date)

#DATE AND TIME
@router.message(TournamentCreation.date)
async def set_date(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—É—Ä–Ω–∏—Ä–µ
    date = message.text  # –î–∞—Ç–∞, –∫–æ—Ç–æ—Ä—É—é –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    await state.update_data(date=date)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:", reply_markup=confirm_button())
    await state.set_state(TournamentCreation.confirm)


@router.message(TournamentCreation.confirm)
async def confirm_creation(message: types.Message, state: FSMContext):
    if message.text != "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard())
        await state.clear()
        return

    data = await state.get_data()
    title = data["title"]
    description = data["description"]
    start_time = data["date"]  # —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ISO 8601

    try:
        tournament_url = await create_tournament(title, description, start_time)
        await message.answer(
            f"‚úÖ –¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω!\n\nüîó <a href='{tournament_url}'>–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Challengermode</a>",
            parse_mode="HTML",
            reply_markup=main_menu_keyboard()
        )
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞: {e}", reply_markup=main_menu_keyboard())

    await state.clear()
